Back-ported numeric.c patches (ruby-core:33811) 
originally by Yui Naruse on Nov 22 2011

diff -ru ruby-1.8.7-p358.orig/numeric.c ruby-1.8.7-p358/numeric.c
--- ruby-1.8.7-p358.orig/numeric.c	2011-12-10 04:17:27.000000000 -0800
+++ ruby-1.8.7-p358/numeric.c	2012-04-07 10:49:04.000000000 -0700
@@ -1450,10 +1450,21 @@
 	long i;
 
 	if (err>0.5) err=0.5;
-	n = floor(n + err);
-	if (!excl || ((long)n)*unit+beg < end) n++;
-	for (i=0; i<n; i++) {
-	    rb_yield(rb_float_new(i*unit+beg));
+	if (excl) {
+	    if (n<=0) return Qtrue;
+	    if (n<1)
+		n = 0;
+	    else
+		n = floor(n - err);
+	}
+	else {
+	    if (n<0) return Qtrue;
+	    n = floor(n + err);
+	}
+	for (i=0; i<=n; i++) {
+	    double d = i*unit+beg;
+	    if (end < d) d = end;
+	    rb_yield(rb_float_new(d));
 	}
 	return Qtrue;
     }
diff -ru ruby-1.8.7-p358.orig/test/ruby/test_float.rb ruby-1.8.7-p358/test/ruby/test_float.rb
--- ruby-1.8.7-p358.orig/test/ruby/test_float.rb	2011-12-10 04:17:27.000000000 -0800
+++ ruby-1.8.7-p358/test/ruby/test_float.rb	2012-04-07 10:38:24.000000000 -0700
@@ -171,4 +171,33 @@
     assert_raise(ArgumentError) { 1.0 < nil }
     assert_raise(ArgumentError) { 1.0 <= nil }
   end
+
+  def test_step
+    1000.times do
+      a = rand
+      b = a+rand*1000
+      s = (b - a) / 10
+      assert_equal(11, (a..b).step(s).to_a.length)
+    end
+
+    (1.0..12.7).step(1.3).each do |n|
+      assert_operator(n, :<=, 12.7)
+    end
+  end
+
+  def test_step_excl
+    1000.times do
+      a = rand
+      b = a+rand*1000
+      s = (b - a) / 10
+      assert_equal(10, (a...b).step(s).to_a.length)
+    end
+
+    assert_equal([1.0, 2.9, 4.8, 6.699999999999999], (1.0...6.8).step(1.9).to_a)
+
+    e = 1+1E-12
+    (1.0 ... e).step(1E-16) do |n|
+      assert_operator(n, :<=, e)
+    end
+  end
 end
